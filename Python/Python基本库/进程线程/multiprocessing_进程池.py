"""multiprocessing  模块"""
import multiprocessing
import os


'''
1.进程池，多进程

导入方式:
    import multiprocessing
'''

print('1.')
print('——————————————————————————————————————————————————')

print('1.')

print('——————————————————————————————————————————————————')
print('\n')


'''
2.Process()

创建进程
主进程结束不影响该进程
参数:
    group:
    target: 进程调用的目标对象
    name: 名称
    args: 调用对象时传入的位置参数
    kwargs: 调用对象时传入的关键字参数
name  名称
start()  启动进程，开始执行（会报出 IOError, OSError）
run()  此方法要在子进程中执行，不启动进程
terminate()  终止
join()  等待结束
'''

print('2.')
print('——————————————————————————————————————————————————')

print('1.')

print('——————————————————————————————————————————————————')
print('\n')


'''
3.Pool()

创建进程池
主进程结束，此进程池结束
参数:
    processes  进程总数量，不填写默认cpu总数
apply()  提交一个任务并等待任务结束，返回其返回值
apply_asycr()  异步模式的 apply()，也就是不等待任务结束
map()  加工序列，类似内置函数 map，等待任务结束，返回加工好的新序列
map_asycr()  异步模式的 map()
starmap()  和 map() 相似，但是返回的序列是无序的
starmap_asycr()  异步模式的 starmap()
close()  结束任务提交
terminate()  结束进程池
join()  等待进程任务结束
'''

print('3.')
print('——————————————————————————————————————————————————')

print('1.')

print('——————————————————————————————————————————————————')
print('\n')


'''
4.Queue()

队列
参数:
    maxsize  队列最大长度
put()  向队列放入一个值，如果队列已满则等待队列有空位
    参数:
        obj: 对象
        block: 如果队列已满，是否阻塞等待
        timeout: 超时。设置后如果超时了，那么报出异常 queue.Full
get()  向队列取出一个值，如果队列为空则等待队列有值
    参数:
        obj: 对象
        block: 如果队列为空，是否阻塞等待
        timeout: 超时。设置后如果超时了，那么报出异常 queue.Empty
psize()  当前队列长度
full()  队列是否已满
empty()  队列是否为空
'''

print('4.')
print('——————————————————————————————————————————————————')

print('1.')

print('——————————————————————————————————————————————————')
print('\n')
